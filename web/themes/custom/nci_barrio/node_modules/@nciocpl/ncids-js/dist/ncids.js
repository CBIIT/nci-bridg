var __awaiter$3 = window && window.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

class NCIAutocomplete {
  constructor(autocompleteInput, options) {
    this.optionsListNumber = null;

    this.optionClickEventListener = event => this.handleOptionClick(event);

    this.inputEventListener = () => this.handleInput();

    this.keyPressEventListener = event => this.handleKeypress(event);

    this.submissionEventListener = () => this.handleFormSubmission();

    this.outsideClickListener = event => this.handleOutsideClick(event);

    this.autocompleteInput = autocompleteInput;
    this.autocompleteInputId = this.autocompleteInput.id;
    this.options = Object.assign(Object.assign({
      autocompleteSource: undefined
    }, NCIAutocomplete.optionDefaults), options);

    if (!this.options.autocompleteSource) {
      throw 'option autocompleteSource is undefined';
    }

    this.optionsListDisplayed = false;
    this.selectedOptionInfo = {
      inputtedTextWhenSelected: '',
      selectedOptionIndex: null,
      selectedOptionValue: null
    };
    this.adaptor = this.options.autocompleteSource;
    this.acForm = this.autocompleteInput.closest('form');
    this.acInputParent = this.autocompleteInput.parentElement;
    this.autocompleteContainer = document.createElement('div');
    this.autocompleteContainer.classList.add('nci-autocomplete');

    while (this.acInputParent.firstChild) {
      const nodeToMove = this.acInputParent.firstChild;
      this.acInputParent.removeChild(this.acInputParent.firstChild);
      this.autocompleteContainer.appendChild(nodeToMove);
    }

    this.acInputParent.append(this.autocompleteContainer);
    this.listboxWrapper = document.createElement('div');
    this.listbox = document.createElement('div');
    this.announcer = document.createElement('div');
    this.initialize();
  }

  static create(element, options) {
    if (!(element instanceof HTMLInputElement)) {
      throw 'Must be an input element to be an autocomplete';
    }

    return new this(element, options);
  }

  initialize() {
    this.updateDom();
  }

  updateDom() {
    this.listboxWrapper.setAttribute('id', this.autocompleteInputId + '-termswrapper');
    this.listboxWrapper.classList.add('nci-autocomplete__listbox');

    if (this.options.listboxClasses !== '') {
      this.listboxWrapper.classList.add(this.options.listboxClasses);
    }

    this.listbox.setAttribute('id', this.autocompleteInputId + '-terms');
    this.listbox.setAttribute('tabindex', '-1');
    this.listbox.setAttribute('role', 'listbox');
    this.listboxWrapper.append(this.listbox);
    this.autocompleteContainer.append(this.listboxWrapper);
    this.announcer.classList.add('nci-autocomplete__status');
    this.announcer.setAttribute('aria-live', 'assertive');
    this.autocompleteContainer.prepend(this.announcer);
    this.autocompleteInput.setAttribute('role', 'combobox');
    this.autocompleteInput.setAttribute('aria-autocomplete', 'list');
    this.autocompleteInput.setAttribute('aria-haspopup', 'listbox');
    this.autocompleteInput.setAttribute('aria-expanded', 'false');
    this.autocompleteInput.setAttribute('aria-owns', this.autocompleteInputId + '-terms');
    this.autocompleteInput.setAttribute('aria-activedescendant', '');
    this.addEventListeners();
  }

  addEventListeners() {
    this.autocompleteInput.addEventListener('input', this.inputEventListener, true);
    this.autocompleteInput.addEventListener('keydown', this.keyPressEventListener, true);
    this.acForm.addEventListener('submit', this.submissionEventListener, true);
    window.addEventListener('click', this.outsideClickListener, true);
  }

  closeListbox() {
    this.autocompleteInput.removeAttribute('aria-activedescendant');
    this.autocompleteInput.setAttribute('aria-expanded', 'false');
    this.announcer.innerHTML = '';
    this.listbox.innerHTML = '';
    this.listboxWrapper.classList.remove('active');
  }

  handleFormSubmission() {
    const formDetail = Object.assign({
      searchText: this.autocompleteInput.value,
      optionsPresented: this.optionsListDisplayed,
      optionSetSize: this.optionsListNumber
    }, this.selectedOptionInfo);
    this.autocompleteInput.dispatchEvent(new CustomEvent('nci-autocomplete:formSubmission', {
      bubbles: true,
      detail: formDetail
    }));
    this.selectedOptionInfo = {
      inputtedTextWhenSelected: '',
      selectedOptionIndex: null,
      selectedOptionValue: null
    };
  }

  handleInput() {
    return __awaiter$3(this, void 0, void 0, function* () {
      if (this.autocompleteInput.value.length >= this.options.minCharCount) {
        const response = yield this.adaptor.getAutocompleteSuggestions(this.autocompleteInput.value);
        this.buildTermsList(response);
      } else if (this.options.minPlaceholderMsg && this.autocompleteInput.value.length < this.options.minCharCount && this.autocompleteInput.value.length > 0) {
        this.optionsListDisplayed = false;
        this.listbox.innerHTML = `<div class="nci-autocomplete__option"><span class="minPlaceholderMsg">${this.options.minPlaceholderMsg}</span></div>`;
        this.listboxWrapper.classList.add('active');
      } else {
        this.optionsListDisplayed = false;
        this.closeListbox();
      }

      return;
    });
  }

  handleOutsideClick(event) {
    if (this.listboxWrapper.classList.contains('active')) {
      const target = event.target;

      if (!target.matches('nci-autocomplete__option')) {
        this.closeListbox();
      }
    } else {
      return;
    }
  }

  handleKeypress(event) {
    var _a;

    const keyboardEvt = event;
    const termHighlighted = ((_a = this.listbox.querySelectorAll('.highlight')) === null || _a === void 0 ? void 0 : _a.length) > 0;

    switch (keyboardEvt.key) {
      case 'Escape':
      case 'Tab':
        this.closeListbox();
        break;

      case 'Enter':
        if (termHighlighted) {
          event.preventDefault();
          event.stopPropagation();
          return this.selectOption(termHighlighted);
        } else {
          return;
        }

      case 'ArrowRight':
        return this.selectOption(termHighlighted);

      case 'ArrowUp':
        event.preventDefault();
        event.stopPropagation();
        return this.moveUp(termHighlighted);

      case 'ArrowDown':
        event.preventDefault();
        event.stopPropagation();
        return this.moveDown(termHighlighted);

      default:
        return;
    }
  }

  moveUp(highlighted) {
    if (highlighted) {
      const currentTerm = this.listbox.querySelector('.highlight');
      currentTerm.setAttribute('aria-selected', 'false');
      currentTerm.classList.remove('highlight');
      const prevTerm = currentTerm.previousSibling;
      prevTerm.setAttribute('aria-selected', 'true');
      prevTerm.classList.add('highlight');
      this.autocompleteInput.setAttribute('aria-activedescendant', prevTerm.id);
    } else {
      const terms = this.listbox.querySelectorAll('.nci-autocomplete__option');
      const lastTerm = terms[terms.length - 1];

      if (lastTerm != null) {
        lastTerm.classList.add('highlight');
        lastTerm.setAttribute('aria-selected', 'true');
        this.autocompleteInput.setAttribute('aria-activedescendant', lastTerm.id);
      }
    }
  }

  moveDown(highlighted) {
    if (highlighted) {
      const currentTerm = this.listbox.querySelector('.highlight');
      currentTerm.setAttribute('aria-selected', 'false');
      currentTerm.classList.remove('highlight');
      const nextTerm = currentTerm.nextSibling;
      nextTerm.setAttribute('aria-selected', 'true');
      nextTerm.classList.add('highlight');
      this.autocompleteInput.setAttribute('aria-activedescendant', nextTerm.id);
    } else {
      const terms = this.listbox.querySelectorAll('.nci-autocomplete__option');
      const firstTerm = terms[0];
      firstTerm.classList.add('highlight');
      firstTerm.setAttribute('aria-selected', 'true');
      this.autocompleteInput.setAttribute('aria-activedescendant', firstTerm.id);
    }
  }

  selectOption(termHighlighted) {
    if (termHighlighted && this.autocompleteInput) {
      const selectedOption = this.listbox.querySelector('.highlight');
      const selectedOptionSpan = selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.querySelector('span');
      this.selectedOptionInfo = {
        inputtedTextWhenSelected: this.autocompleteInput.value,
        selectedOptionValue: selectedOptionSpan.getAttribute('aria-label') || '',
        selectedOptionIndex: Number(selectedOption.getAttribute('aria-posinset') || '') || 0
      };
      this.autocompleteInput.dispatchEvent(new CustomEvent('nci-autocomplete:optionSelected', {
        detail: this.selectedOptionInfo
      }));
      this.autocompleteInput.removeAttribute('aria-activedescendant');
      this.autocompleteInput.value = selectedOptionSpan.getAttribute('aria-label') || '';
      this.autocompleteInput.focus();
      this.closeListbox();
    }
  }

  markInputMatch(termText) {
    return termText.replace(new RegExp(this.autocompleteInput.value, 'gi'), match => `<mark>${match}</mark>`);
  }

  buildTermsList(termsArr) {
    this.updateAnnouncer(termsArr.length);

    if (termsArr.length < 1) {
      this.optionsListDisplayed = false;
      this.listbox.innerHTML = '';
      this.listboxWrapper.classList.remove('active');
      this.optionsListNumber = 0;
      this.closeListbox();
    } else {
      const termsList = termsArr.map((term, idx) => {
        this.optionsListNumber = termsArr.length;
        return idx < this.options.maxOptionsCount ? `<div 
            class="nci-autocomplete__option" 
            tabindex="-1" 
            role="option" 
            aria-posinset="${idx}" 
            aria-setsize="${termsArr.length}" 
            id="term-${idx}">
              <span aria-label="${term}">${this.options.highlightMatchingText ? this.markInputMatch(term) : term}</span>
            </div>` : '';
      });
      this.listbox.innerHTML = termsList.join('');
      this.listboxWrapper.classList.add('active');
      this.autocompleteInput.setAttribute('aria-expanded', 'true');
      this.optionsListDisplayed = true;
      const termDivs = document.querySelectorAll(`#${this.autocompleteInputId}-terms .nci-autocomplete__option`);
      termDivs.forEach(termDiv => {
        termDiv.addEventListener('click', this.optionClickEventListener, true);
      });
    }
  }

  handleOptionClick(e) {
    const currOption = e.currentTarget;
    const currSpan = currOption.querySelector('span');
    const selectedVal = currSpan.getAttribute('aria-label') || '';
    this.selectedOptionInfo = {
      inputtedTextWhenSelected: this.autocompleteInput.value,
      selectedOptionValue: selectedVal,
      selectedOptionIndex: Number(currOption.getAttribute('aria-posinset'))
    };
    this.autocompleteInput.dispatchEvent(new CustomEvent('nci-autocomplete:optionSelected', {
      detail: this.selectedOptionInfo
    }));
    this.autocompleteInput.value = selectedVal;
    this.autocompleteInput.focus();
    this.closeListbox();
  }

  updateAnnouncer(termCount) {
    if (termCount >= 1) {
      this.announcer.innerHTML = document.documentElement.lang === 'es' ? `${termCount.toString()} sugerencias automáticas. Use flecha arriba o flecha abajo para escuchar las opciones.` : `${termCount.toString()} suggestions found, use up and down arrows to review`;
    } else {
      this.announcer.innerHTML = '';
    }
  }

}
NCIAutocomplete.optionDefaults = {
  highlightMatchingText: true,
  maxOptionsCount: 10,
  minCharCount: 3,
  minPlaceholderMsg: '',
  listboxClasses: '',
  optionSetSize: null
};

class FooterCollapse {
  constructor(element, options) {
    this.customEvents = {};

    this.clickEventListener = () => this.handleClick();

    this.element = element;
    this.options = options;
    this.collapseHeader = document.createElement('button');
    this.heading = this.element.querySelector(`.${this.options.collapseButtonClass}`);
    this.list = this.element.querySelector('.usa-list--unstyled');
    this.listHeader = document.createElement('span');
    this.initialize();
  }

  unregister() {
    this.element.classList.remove('hidden');
    this.toggleCollapseA11y(false);
    const label = this.collapseHeader.innerHTML;
    this.collapseHeader.remove();
    this.listHeader.remove();
    this.list.removeAttribute('id');
    this.list.removeAttribute('aria-label');
    this.heading.classList.add(this.options.collapseButtonClass);
    this.heading.innerHTML = label;
    this.removeEventListeners();
  }

  initialize() {
    this.createCustomEvents();
    this.addEventListeners();
    this.updateDom();
    this.toggleCollapse(true);
  }

  updateDom() {
    const label = this.heading.innerHTML;
    const id = label.replace(/ /g, '-').toLowerCase();
    this.heading.classList.remove(this.options.collapseButtonClass);
    this.heading.innerHTML = '';
    this.listHeader.classList.add(this.options.collapseButtonClass, 'usa-footer__nci-list-header');
    this.listHeader.innerHTML = label;
    this.collapseHeader.classList.add(this.options.collapseButtonClass, 'usa-footer__nci-collapse-header');
    this.collapseHeader.setAttribute('aria-controls', id);
    this.collapseHeader.setAttribute('aria-expanded', 'false');
    this.collapseHeader.innerHTML = label;
    this.list.setAttribute('id', id);
    this.list.setAttribute('aria-label', label);
    this.heading.append(this.listHeader);
    this.heading.append(this.collapseHeader);
  }

  toggleCollapse(hidden) {
    const list = this.element.querySelector('.usa-list');
    list.classList.toggle('hidden', hidden);
    this.toggleCollapseA11y(hidden);
    const event = hidden ? 'collapse' : 'expand';
    this.element.dispatchEvent(this.customEvents[event]);
  }

  toggleCollapseA11y(hidden) {
    this.collapseHeader.setAttribute('aria-expanded', String(!hidden));
    this.list.setAttribute('aria-hidden', String(hidden));
    this.list.hidden = hidden;
    this.list.hidden = hidden;
  }

  addEventListeners() {
    this.collapseHeader.addEventListener('click', this.clickEventListener);
  }

  removeEventListeners() {
    this.collapseHeader.removeEventListener('click', this.clickEventListener);
  }

  handleClick() {
    const list = this.element.querySelector('.usa-list');

    if (list.classList.contains('hidden')) {
      this.toggleCollapse(false);
    } else {
      this.toggleCollapse(true);
    }
  }

  createCustomEvents() {
    const events = ['collapse', 'expand'];
    [...events].forEach(event => {
      this.customEvents[event] = new CustomEvent(`${this.options.collapseEventListenerLabel}:${event}`, {
        bubbles: true,
        detail: this.element
      });
    });
  }

}

class NCIBackToTop {
  constructor(element) {
    this.scrollListener = () => this.handleScroll();

    this.element = element;
    this.initialize();
  }

  handleScroll() {
    const y = window.scrollY;

    if (y > 0) {
      this.element.classList.remove('hide');
      this.element.classList.add('show');
    } else {
      this.element.classList.remove('show');
      this.element.classList.add('hide');
    }
  }

  unregister() {
    this.element.classList.remove('show', 'hide', 'usa-footer__nci-return-to-top');
    this.element.classList.add('grid-container', 'usa-footer__return-to-top');
  }

  initialize() {
    this.element.classList.remove('grid-container', 'usa-footer__return-to-top');
    this.element.classList.add('usa-footer__nci-return-to-top', 'hide');
    window.addEventListener('scroll', this.scrollListener, false);
  }

}

class NCISubscribe {
  constructor(form, options) {
    this.customEvents = {};

    this.submitEventListener = e => this.handleSubmit(e);

    this.form = form;
    this.options = options;
    this.invalidEmailAlert = this.createInvalidEmailAlert();

    const existingComponent = NCISubscribe._components.get(this.form);

    if (existingComponent) {
      existingComponent.unregister();
    }

    NCISubscribe._components.set(this.form, this);

    this.initialize();
  }

  static create(element, options) {
    if (!(element instanceof HTMLElement)) {
      throw 'Element is not an HTMLElement';
    }

    return this._components.get(element) || new this(element, options);
  }

  unregister() {
    this.removeEventListeners();
    this.toggleFormErrors(true);
    this.invalidEmailAlert.remove();

    NCISubscribe._components.delete(this.form);
  }

  initialize() {
    this.addEventListeners();
    this.createCustomEvents();
    this.addMessage();
  }

  addEventListeners() {
    this.form.addEventListener('submit', this.submitEventListener);
  }

  removeEventListeners() {
    this.form.removeEventListener('submit', this.submitEventListener);
  }

  handleSubmit(event) {
    event.preventDefault();
    const form = this.form;
    const elements = form.elements;
    const input = elements.namedItem('email');
    const isValid = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(input.value);

    if (isValid) {
      this.toggleFormErrors(true);
      this.form.dispatchEvent(this.customEvents['submit']);
      form.submit();
    } else {
      this.toggleFormErrors(false);
      this.form.dispatchEvent(this.customEvents['error']);
      input.focus();
    }
  }

  createInvalidEmailAlert() {
    const alert = document.createElement('span');
    const alertID = 'email-error-message';
    alert.classList.add('usa-error-message', 'hidden');
    alert.id = alertID;
    alert.innerHTML = this.options.subscribeInvalidEmailAlert;
    alert.setAttribute('aria-hidden', String(true));
    alert.setAttribute('role', 'alert');
    return alert;
  }

  addMessage() {
    const input = this.form.querySelector('.usa-input');
    input.setAttribute('aria-describedby', this.invalidEmailAlert.id);
    input.before(this.invalidEmailAlert);
  }

  toggleFormErrors(isValid) {
    const group = this.form.querySelector('.usa-form-group');
    isValid ? group.classList.remove('usa-form-group--error') : group.classList.add('usa-form-group--error');
    const label = this.form.querySelector('.usa-label');
    isValid ? label.classList.remove('usa-label--error') : label.classList.add('usa-label--error');
    const input = this.form.querySelector('.usa-input');
    isValid ? input.classList.remove('usa-input--error') : input.classList.add('usa-input--error');
    const alert = this.form.querySelector('.usa-error-message');
    isValid ? alert.classList.add('hidden') : alert.classList.remove('hidden');
    alert.setAttribute('aria-hidden', String(isValid));
  }

  createCustomEvents() {
    const events = ['submit', 'error'];
    [...events].forEach(event => {
      this.customEvents[event] = new CustomEvent(`${this.options.subscribeEventListenerLabel}:${event}`, {
        detail: this.form
      });
    });
  }

}
NCISubscribe._components = new Map();

class NCIBigFooter {
  constructor(element, options) {
    this.collapses = [];

    this.resizeEventListener = e => this.handleResize(e);

    this.element = element;
    this.options = Object.assign(Object.assign({}, NCIBigFooter.optionDefaults), options);
    this.collapseMediaQuery = matchMedia(`(min-width: ${this.options.collapseWidth}px)`);

    const existingComponent = NCIBigFooter._components.get(this.element);

    if (existingComponent) {
      existingComponent.unregister();
    }

    NCIBigFooter._components.set(this.element, this);

    this.initialize();
  }

  static create(element, options) {
    if (!(element instanceof HTMLElement)) {
      throw 'Element is not an HTMLElement';
    }

    return this._components.get(element) || new this(element, options);
  }

  static autoInit() {
    document.addEventListener('DOMContentLoaded', () => {
      const footers = Array.from(document.getElementsByClassName('usa-footer'));
      footers.forEach(footer => {
        this.create(footer);
      });
    });
  }

  unregister() {
    if (this.form) {
      this.form.unregister();
      this.form = undefined;
    }

    if (this.backToTop) {
      this.backToTop.unregister();
      this.backToTop = undefined;
    }

    this.unregisterCollapses();
    this.removeEventListeners();

    NCIBigFooter._components.delete(this.element);
  }

  unregisterCollapses() {
    this.collapses.forEach(collapse => {
      collapse.unregister();
    });
    this.collapses = [];
  }

  initialize() {
    this.createSubscribe();
    this.addEventListeners();
    this.createBackToTop();
    const currentWidth = window.innerWidth;
    const collapseWidth = this.options.collapseWidth;

    if (currentWidth < collapseWidth) {
      this.createCollapsibleSections();
    }
  }

  handleResize(query) {
    if (query.matches) {
      this.unregisterCollapses();
    } else {
      this.createCollapsibleSections();
    }
  }

  createCollapsibleSections() {
    const collapses = this.queryCollapsibleSections();
    collapses.forEach((collapse, index) => {
      this.collapses[index] = new FooterCollapse(collapse, this.options);
    });
  }

  queryCollapsibleSections() {
    const selector = '.usa-footer__primary-content--collapsible';
    return Array.from(this.element.querySelectorAll(selector));
  }

  createSubscribe() {
    const form = this.element.querySelector('form');

    if (form) {
      this.form = NCISubscribe.create(form, this.options);
    }
  }

  createBackToTop() {
    const linkElement = this.element.getElementsByClassName('usa-footer__return-to-top')[0];

    if (linkElement) {
      this.backToTop = new NCIBackToTop(linkElement);
    }
  }

  addEventListeners() {
    this.collapseMediaQuery.addEventListener('change', this.resizeEventListener);
  }

  removeEventListeners() {
    this.collapseMediaQuery.removeEventListener('change', this.resizeEventListener);
  }

}
NCIBigFooter.optionDefaults = {
  collapseButtonClass: 'usa-footer__primary-link',
  collapseClass: 'usa-footer__primary-content--collapsible',
  collapseWidth: 480,
  collapseEventListenerLabel: 'usa-footer:nav-links',
  subscribeInvalidEmailAlert: 'Enter a valid email address',
  subscribeEventListenerLabel: 'usa-footer:sign-up'
};
NCIBigFooter._components = new Map();

class SiteAlertCloseButton {
  constructor(element, options) {
    this.customEvents = {};

    this.eventListener = () => this.handleClose();

    this.element = element;
    this.options = options;
    this.button = this.createButton();
    this.initialize();
  }

  unregister() {
    this.removeEventListeners();
    this.element.style.display = '';
    this.button.remove();
  }

  initialize() {
    this.hideSiteAlert();
    this.createCustomEvents();
    this.addButton();
    this.addEventListeners();
  }

  createButton() {
    const button = document.createElement('button');
    button.classList.add('usa-alert__nci-button', this.options.closeButtonClass);
    button.setAttribute('aria-label', this.options.closeAriaLabel);
    button.innerHTML += '<svg class="usa-icon" role="img" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M0 13.0332964L13.0332964 0M13.0332964 13.0332964L0 0" transform="translate(1 1)"/></svg>';
    return button;
  }

  hideSiteAlert() {
    var _a;

    const cookie = (_a = document.cookie.match(`(^|;)\\s*NCISiteAlert${this.element.id}\\s*=\\s*([^;]+)`)) === null || _a === void 0 ? void 0 : _a.pop();

    if (cookie === 'hidden') {
      this.element.style.display = 'none';
    }
  }

  addButton() {
    const alert = this.element.querySelector('.usa-alert');
    alert.append(this.button);
  }

  addEventListeners() {
    this.button.addEventListener('click', this.eventListener);
  }

  removeEventListeners() {
    this.button.removeEventListener('click', this.eventListener);
  }

  handleClose() {
    document.cookie = `NCISiteAlert${this.element.id}=hidden; Path=${this.options.closeCookiePath}`;
    this.hideSiteAlert();
    this.element.dispatchEvent(this.customEvents['close']);
  }

  createCustomEvents() {
    this.customEvents['close'] = new CustomEvent(`${this.options.closeEventListenerLabel}:close`, {
      detail: this.element
    });
  }

}

class SiteAlertCollapse {
  constructor(element, options) {
    this.customEvents = {};

    this.eventListener = () => this.handleClick();

    this.element = element;
    this.options = options;
    this.collapsibleContent = this.element.querySelector('.usa-alert__nci-content');
    this.button = this.createButton();
    this.initialize();
  }

  unregister() {
    this.collapsibleContent.classList.remove('hidden');
    this.toggleCollapseA11y();
    this.button.remove();
    this.removeEventListeners();
  }

  initialize() {
    var _a;

    this.createCustomEvents();
    this.addButton();
    this.addEventListeners();
    const cookie = (_a = document.cookie.match(`(^|;)\\s*NCISiteAlert${this.element.id}\\s*=\\s*([^;]+)`)) === null || _a === void 0 ? void 0 : _a.pop();

    if (!cookie) {
      this.toggleCollapse();
    } else {
      this.setFromCookie(cookie);
    }
  }

  createButton() {
    const button = document.createElement('button');
    button.classList.add('usa-alert__nci-button', this.options.collapseButtonClass);
    button.setAttribute('aria-controls', this.collapsibleContent.id);
    button.setAttribute('aria-expanded', 'false');
    button.setAttribute('aria-label', this.options.collapseAriaLabel);
    button.innerHTML = '<svg class="usa-icon" role="img" aria-hidden="true" viewBox="0 0 64 39"><path fill="currentColor" d="M.655 34.187c-.427-.437-.64-.937-.64-1.503 0-.566.213-1.067.64-1.502L30.542.756c.427-.436.918-.653 1.474-.653.555 0 1.048.218 1.474.653l29.884 30.426c.428.435.642.936.642 1.502s-.213 1.066-.642 1.501l-3.206 3.265c-.427.436-.919.653-1.475.653-.555 0-1.047-.217-1.475-.653L32.016 11.79 6.81 37.45c-.427.436-.919.653-1.474.653-.556 0-1.048-.217-1.475-.653L.655 34.187z"></path></svg>';
    return button;
  }

  addButton() {
    const header = this.element.querySelector('.usa-alert__nci-header');
    header.append(this.button);
  }

  toggleCollapse() {
    this.collapsibleContent.classList.toggle('hidden');
    this.toggleCollapseA11y();
    const event = this.collapsibleContent.classList.contains('hidden') ? 'collapse' : 'expand';
    this.element.dispatchEvent(this.customEvents[event]);
    document.cookie = `NCISiteAlert${this.element.id}=${event}; Path=${this.options.collapseCookiePath}`;
  }

  toggleCollapseA11y() {
    const hidden = this.collapsibleContent.classList.contains('hidden');
    this.button.setAttribute('aria-expanded', String(!hidden));
    const controls = this.button.getAttribute('aria-controls');
    const content = this.element.querySelector(`#${controls}`);
    content.setAttribute('aria-hidden', String(hidden));
  }

  setFromCookie(cookie) {
    if (cookie === 'collapse') {
      this.collapsibleContent.classList.add('hidden');
    } else if (cookie === 'expand') {
      this.collapsibleContent.classList.remove('hidden');
    }

    this.toggleCollapseA11y();
  }

  addEventListeners() {
    this.button.addEventListener('click', this.eventListener);
  }

  removeEventListeners() {
    this.button.removeEventListener('click', this.eventListener);
  }

  handleClick() {
    this.toggleCollapse();
  }

  createCustomEvents() {
    const events = ['collapse', 'expand'];
    [...events].forEach(event => {
      this.customEvents[event] = new CustomEvent(`${this.options.collapseEventListenerLabel}:${event}`, {
        detail: this.element
      });
    });
  }

}

class NCISiteAlert {
  constructor(element, options) {
    this.element = element;
    this.options = Object.assign(Object.assign({}, NCISiteAlert.optionDefaults), options);

    const existingComponent = NCISiteAlert._components.get(this.element);

    if (existingComponent) {
      existingComponent.unregister();
    }

    NCISiteAlert._components.set(this.element, this);

    this.initialize();
  }

  static create(element, options) {
    if (!(element instanceof HTMLElement)) {
      throw 'Element is not an HTMLElement';
    }

    return this._components.get(element) || new this(element, options);
  }

  static autoInit() {
    document.addEventListener('DOMContentLoaded', () => {
      const siteAlerts = Array.from(document.getElementsByClassName('usa-site-alert'));
      siteAlerts.forEach(siteAlert => {
        var _a;

        const alert = siteAlert;
        const closeable = ((_a = alert.dataset.siteAlertClosable) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true';
        NCISiteAlert.create(alert, {
          closeable
        });
      });
    });
  }

  unregister() {
    if (this.collapse) {
      this.collapse.unregister();
    }

    if (this.closeButton) {
      this.closeButton.unregister();
    }

    NCISiteAlert._components.delete(this.element);
  }

  initialize() {
    this.createCloseButton();
    this.createCollapse();
  }

  createCloseButton() {
    if (this.options.closeable && this.element.id) {
      this.closeButton = new SiteAlertCloseButton(this.element, this.options);
    }
  }

  createCollapse() {
    if (this.element.classList.contains('usa-site-alert--nci-standard') && this.element.id) {
      this.collapse = new SiteAlertCollapse(this.element, this.options);
    }
  }

}
NCISiteAlert.optionDefaults = {
  closeable: false,
  closeAriaLabel: 'Dismiss alert',
  closeButtonClass: 'usa-alert__nci-button--close',
  closeEventListenerLabel: 'usa-site-alert:close-button',
  closeCookiePath: '/',
  collapseAriaLabel: 'Toggle alert message',
  collapseButtonClass: 'usa-alert__nci-button--toggle',
  collapseCookiePath: '/',
  collapseEventListenerLabel: 'usa-site-alert:content'
};
NCISiteAlert._components = new Map();

class DefaultMegaMenuSource {
  constructor() {
    this.useUrlForNavigationId = true;
    console.warn('Mega menu source not specified');
  }

  getMegaMenuContent() {
    return null;
  }

}

var __awaiter$2 = window && window.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

class DefaultMobileMenuSource {
  constructor() {
    this.useUrlForNavigationId = true;
    this.lang = document.documentElement.lang;
    this.primaryNavItems = Array.from(document.querySelectorAll('.nci-header-nav__primary-item a'));
    this.items = [{
      id: 0,
      label: 'Error',
      path: '/',
      langcode: this.lang,
      hasChildren: false
    }];
  }

  getInitialMenuId() {
    return __awaiter$2(this, void 0, void 0, function* () {
      return 0;
    });
  }

  getNavigationLevel(id) {
    return __awaiter$2(this, void 0, void 0, function* () {
      return this.createDefaultMobileMenu(id);
    });
  }

  createDefaultMobileMenu(id) {
    this.items = this.primaryNavItems.map((item, index) => {
      const anchor = item;
      const path = anchor.href;
      const textContent = item.textContent;
      return {
        id: index,
        label: textContent,
        path: path,
        langcode: this.lang,
        hasChildren: false
      };
    });
    return {
      id: id,
      label: '',
      path: '/',
      langcode: this.lang,
      hasChildren: true,
      items: this.items,
      parent: null
    };
  }

}

class FocusTrap {
  constructor(element) {
    this.focusableContent = [];

    this.eventListener = event => this.checkTrap(event);

    this.element = element;
    this.focusableElements = "button, [href], input, select, textarea, [tabindex]:not([tabindex='-1'])";
  }

  toggleTrap(state, context) {
    if (state) {
      this.findFocusableElements(context);
      context.addEventListener('keydown', this.eventListener, true);
    } else {
      context.removeEventListener('keydown', this.eventListener, true);
    }
  }

  findFocusableElements(element) {
    this.context = element;
    this.focusableContent = Array.from(element.querySelectorAll(this.focusableElements));
    this.firstFocusableElement = element.querySelectorAll(this.focusableElements)[0];
    this.lastFocusableElement = this.focusableContent[this.focusableContent.length - 1];
  }

  checkTrap(event) {
    const eventKey = event;
    const isTabPressed = eventKey.key === 'Tab' || parseInt(eventKey.code, 10) === 9;

    if (!isTabPressed) {
      return;
    }

    if (eventKey.shiftKey) {
      if (document.activeElement === this.firstFocusableElement) {
        this.lastFocusableElement.focus();
        eventKey.preventDefault();
      }
    } else {
      if (document.activeElement === this.lastFocusableElement) {
        this.firstFocusableElement.focus();
        eventKey.preventDefault();
      }
    }
  }

}

var __awaiter$1 = window && window.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const isNavBarMMItem = item => item.type === 'NavItemWithMM';

const isNavBarItemLink = item => item.type === 'NavItemLink';

class MegaMenuNav {
  constructor(primaryNavElement, adaptor) {
    this.activeButton = null;
    this.activeMenu = null;
    this.customEvents = {};
    this.navItems = [];
    this.loader = document.createElement('div');
    this.loaderContainer = document.createElement('div');

    this.offsetMenuClickListener = event => this.handleOffsetMenuClick(event);

    this.offsetMenuKeyPressListener = event => this.handleOffsetKeypress(event);

    this.element = primaryNavElement;
    this.adaptor = adaptor;
    this.focusTrap = new FocusTrap(this.element);
    this.content = document.createElement('template');
    this.loader.classList.add('nci-is-loading', 'hidden');
    this.loaderContainer.classList.add('nci-megamenu', 'hidden');
    this.loaderContainer.ariaLive = 'polite';
    this.loaderContainer.ariaBusy = 'true';
    this.loaderContainer.ariaAtomic = 'true';
    this.loaderContainer.appendChild(this.loader);
    this.initialize();
  }

  unregister() {
    this.navItems.forEach(item => {
      this.unregisterMenuItem(item);
    });
    this.removeEventListeners();
    this.loader.remove();
    this.loaderContainer.remove();
  }

  unregisterMenuItem(item) {
    if (isNavBarMMItem(item)) {
      item.button.removeEventListener('click', item.buttonListener);
      item.button.replaceWith(item.link);
    } else if (isNavBarItemLink(item)) {
      item.link.removeEventListener('click', item.linkListener);
    }
  }

  initialize() {
    const listItems = this.element.querySelectorAll('.nci-header-nav__primary-link');
    this.navItems = Array.from(listItems).map(item => {
      const button = this.createNavButton(item);

      if (button === null) {
        const linkListener = this.addLinkEventListeners(item);
        return {
          type: 'NavItemLink',
          link: item,
          linkListener
        };
      }

      const buttonListener = this.addButtonEventListeners(button);
      return {
        type: 'NavItemWithMM',
        link: item,
        button,
        buttonListener
      };
    });
    this.createCustomEvents();
    this.addOffsetMenuListeners();
  }

  createNavButton(link) {
    var _a, _b;

    if (((_a = link.dataset.megamenuDisabled) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true') {
      return null;
    }

    const href = link.href;

    if ((href == null || href === '') && this.adaptor.useUrlForNavigationId) {
      const label = ((_b = link.textContent) !== null && _b !== void 0 ? _b : '').trim();
      console.error(`Navigation item, ${label}, does not have a data-menu-id element and adaptor is set to use ID.`);
      return null;
    }

    const id = link.dataset.menuId;

    if (id == null && !this.adaptor.useUrlForNavigationId) {
      console.error(`Navigation item, ${href}, does not have a data-menu-id element and adaptor is set to use ID.`);
      return null;
    }

    const button = document.createElement('button');
    button.innerHTML = link.innerHTML;
    button.classList.add('usa-button', 'nci-header-nav__primary-button');
    button.setAttribute('aria-expanded', 'false');

    if (link.classList.contains('usa-current')) {
      button.classList.add('usa-current');
    }

    if (href) {
      button.setAttribute('data-href', href);
      button.setAttribute('aria-controls', `menu-${href.toString().replace(/[^\w\s]/gi, '')}`);
    }

    if (id) {
      button.setAttribute('data-menu-id', id);
      button.setAttribute('aria-controls', `menu-${id}`);
    }

    link.replaceWith(button);
    return button;
  }

  addButtonEventListeners(button) {
    const listener = event => __awaiter$1(this, void 0, void 0, function* () {
      return this.handleButtonClick(event);
    });

    button.addEventListener('click', listener);
    return listener;
  }

  handleButtonClick(event) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const button = event.target;
      yield this.toggleMegaMenu(button);
    });
  }

  addLinkEventListeners(link) {
    const listener = event => __awaiter$1(this, void 0, void 0, function* () {
      return this.handleLinkClick(event);
    });

    link.addEventListener('click', listener);
    return listener;
  }

  handleLinkClick(event) {
    var _a, _b;

    return __awaiter$1(this, void 0, void 0, function* () {
      const link = event.currentTarget;
      const label = ((_a = link.textContent) !== null && _a !== void 0 ? _a : '').trim();
      this.element.dispatchEvent(this.customEvents['linkclick']({
        label,
        href: (_b = link.href) !== null && _b !== void 0 ? _b : '',
        link
      }));
    });
  }

  handleOffsetMenuClick(event) {
    if (this.activeButton && this.activeMenu) {
      const withinBoundaries = event.composedPath().includes(this.element);

      if (!withinBoundaries) {
        this.collapseMegaMenu();
      }
    }
  }

  handleOffsetKeypress(event) {
    if (this.activeButton && this.activeMenu) {
      const isEscapePressed = event.key === 'Escape';

      if (isEscapePressed) {
        this.collapseMegaMenu();
      }
    }
  }

  toggleMegaMenu(button) {
    return __awaiter$1(this, void 0, void 0, function* () {
      if (this.activeButton === button) {
        this.collapseMegaMenu();
      } else {
        if (this.activeButton) {
          this.collapseMegaMenu();
        }

        yield this.expandMegaMenu(button);
      }
    });
  }

  collapseMegaMenu() {
    if (this.activeButton && this.activeMenu) {
      const collapseDetails = this.getDetailsForExpandCollapse(this.activeButton);
      this.focusTrap.toggleTrap(false, this.activeButton);
      this.activeButton.setAttribute('aria-expanded', 'false');
      this.activeButton = null;
      this.activeMenu.classList.add('hidden');
      this.activeMenu.setAttribute('aria-hidden', 'true');
      this.activeMenu.remove();
      this.activeMenu = null;
      this.element.dispatchEvent(this.customEvents['collapse'](collapseDetails));
    }
  }

  expandMegaMenu(button) {
    return __awaiter$1(this, void 0, void 0, function* () {
      yield this.createMenu(button);
      this.focusTrap.toggleTrap(true, button);
      this.activeButton = button;
      this.activeButton.setAttribute('aria-expanded', 'true');
      const menuId = this.activeButton.getAttribute('aria-controls');
      this.activeMenu = this.element.querySelector(`#${menuId}`);

      if (this.activeMenu) {
        this.activeMenu.classList.remove('hidden');
        this.activeMenu.setAttribute('aria-hidden', 'false');
        this.activeMenu.hidden = false;
      }

      this.element.dispatchEvent(this.customEvents['expand'](this.getDetailsForExpandCollapse(this.activeButton)));
    });
  }

  getDetailsForExpandCollapse(button) {
    var _a;

    const btnText = ((_a = button.textContent) !== null && _a !== void 0 ? _a : '').trim();
    const id = this.getMenuIdForButton(button);
    return {
      label: btnText,
      id,
      button
    };
  }

  createMenu(button) {
    return __awaiter$1(this, void 0, void 0, function* () {
      button.after(this.loaderContainer);
      const timer = setTimeout(() => {
        this.loader.classList.remove('hidden');
        this.loaderContainer.classList.remove('hidden');
      }, 1000);
      const path = this.getMenuIdForButton(button);
      const results = yield this.adaptor.getMegaMenuContent(path);

      if (results) {
        clearTimeout(timer);
      }

      const id = `menu-${path.toString().replace(/[^\w\s]/gi, '')}`;
      this.content = results || document.createElement('div');
      this.content.setAttribute('id', id);
      this.content.classList.add('hidden');
      this.content.ariaLive = 'polite';
      this.content.ariaBusy = 'false';
      this.content.ariaAtomic = 'true';
      this.loader.classList.add('hidden');
      this.loaderContainer.classList.add('hidden');
      this.loaderContainer.replaceWith(this.content);
      button.setAttribute('aria-controls', id);
    });
  }

  getMenuIdForButton(button) {
    var _a;

    return (_a = this.adaptor.useUrlForNavigationId ? button.dataset.href : button.dataset.menuId) !== null && _a !== void 0 ? _a : '';
  }

  addOffsetMenuListeners() {
    document.addEventListener('click', this.offsetMenuClickListener, false);
    document.addEventListener('keydown', this.offsetMenuKeyPressListener, false);
  }

  removeEventListeners() {
    document.removeEventListener('click', this.handleOffsetMenuClick, false);
    document.removeEventListener('keydown', this.handleOffsetKeypress, false);
  }

  createCustomEvents() {
    const events = ['collapse', 'expand'];
    [...events].forEach(event => {
      this.customEvents[event] = detail => new CustomEvent(`nci-header:mega-menu:${event}`, {
        bubbles: true,
        detail
      });
    });

    this.customEvents['linkclick'] = detail => new CustomEvent(`nci-header:primary-nav:linkclick`, {
      bubbles: true,
      detail
    });
  }

}

var __awaiter = window && window.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const locale = {
  close: {
    en: 'Close Menu',
    es: 'Cerrar menú'
  },
  nav: {
    en: 'Primary navigation.',
    es: 'Navegación primaria.'
  }
};
class MobileMenu {
  constructor(mobileNavElement, adaptor) {
    this.menuData = null;
    this.sectionParent = null;
    this.loader = this.createDom('div', ['nci-is-loading', 'hidden']);
    this.resizeWidth = 1024;
    this.customEvents = {};

    this.linkClickListener = e => this.handleLinkClick(e);

    this.menuOpenEventListener = e => this.handleOpenMenu(e);

    this.windowResizeEventListener = query => {
      if (query.matches) {
        this.handleCloseMenu('Close');
      }
    };

    this.menuCloseEventListener = () => this.handleCloseMenu('Close');

    this.escapeKeyPressListener = e => __awaiter(this, void 0, void 0, function* () {
      if (this.activeMenu) {
        const isEscapePressed = e.key === 'Escape';

        if (isEscapePressed) {
          yield this.closeMenu('Escape');
        }
      }
    });

    if (!adaptor.getInitialMenuId) {
      throw new Error('getInitialMenuId required to return a Promise of string or number.');
    }

    if (!adaptor.getNavigationLevel) {
      throw new Error('getNavigationLevel required to return a Promise of MobileMenuData.');
    }

    this.element = mobileNavElement;
    this.adaptor = adaptor;
    this.pageUrl = window.location.pathname;
    this.focusTrap = new FocusTrap(this.element);
    this.activeMenu = false;
    this.mobileButton = this.element.querySelector('.nci-header-mobilenav__open-btn');
    this.resizeMediaQuery = matchMedia(`(min-width: ${this.resizeWidth}px)`);
    this.langCode = document.documentElement.lang;
    this.initialize();
  }

  unregister() {
    this.element.removeEventListener('click', this.linkClickListener);
    this.mobileButton.removeEventListener('click', this.menuOpenEventListener, true);
    this.mobileClose.removeEventListener('click', this.menuCloseEventListener, true);
    this.mobileOverlay.removeEventListener('click', this.menuCloseEventListener, true);
    document.removeEventListener('keydown', this.escapeKeyPressListener, false);
    this.resizeMediaQuery.removeEventListener('change', this.windowResizeEventListener);
    this.mobileOverlay.remove();
    this.mobileClose.remove();
    this.mobileNav.remove();
    this.loader.remove();
  }

  initialize() {
    this.mobileNav = this.createDom('div', ['nci-header-mobilenav'], [{
      tabindex: -1
    }, {
      role: 'dialog'
    }, {
      'aria-modal': true
    }, {
      id: 'nci-header-mobilenav'
    }]);
    this.mobileNav.ariaLive = 'polite';
    this.mobileNav.ariaBusy = 'true';
    this.mobileOverlay = this.createDom('div', ['nci-header-mobilenav__overlay'], []);
    const ariaLabel = locale['close'][this.langCode];
    this.mobileClose = this.createDom('button', ['nci-header-mobilenav__close-btn'], [{
      'aria-controls': 'nci-header-mobilenav'
    }, {
      'aria-label': ariaLabel
    }]);
    this.mobileClose.addEventListener('click', this.menuCloseEventListener = () => this.handleCloseMenu('Close'), true);
    this.mobileOverlay.addEventListener('click', this.menuCloseEventListener = () => this.handleCloseMenu('Overlay'), true);
    this.mobileButton.addEventListener('click', this.menuOpenEventListener, true);
    this.mobileNav.append(this.mobileClose);
    this.mobileNav.append(this.loader);
    this.element.append(this.mobileNav);
    this.element.append(this.mobileOverlay);
    document.addEventListener('keydown', this.escapeKeyPressListener, false);
    this.resizeMediaQuery.addEventListener('change', this.windowResizeEventListener);
    this.createCustomEvents();
  }

  handleOpenMenu(event) {
    return __awaiter(this, void 0, void 0, function* () {
      const menuCheck = this.element.querySelector('.nci-header-mobilenav__list');
      if (menuCheck) menuCheck.remove();
      this.mobileNav.ariaBusy = 'true';
      this.loader.classList.remove('hidden');
      const target = event.currentTarget;
      const label = (target.textContent || '').trim();
      yield this.openMenu(label);
    });
  }

  handleCloseMenu(action) {
    this.closeMenu(action);
  }

  openMenu(label) {
    return __awaiter(this, void 0, void 0, function* () {
      this.activeMenu = true;
      this.mobileNav.classList.add('active');
      this.mobileOverlay.classList.toggle('active');
      const initialMenuId = yield this.adaptor.getInitialMenuId();
      this.menuData = yield this.adaptor.getNavigationLevel(initialMenuId);
      const menu = this.displayNavLevel(this.menuData);
      const menuNav = this.createDom('nav', ['nci-header-mobilenav__nav'], [{
        'aria-label': locale['nav'][this.langCode]
      }]);
      menuNav.appendChild(menu);
      this.mobileNav.append(menuNav);
      this.mobileClose.focus();
      this.focusTrap.toggleTrap(true, this.mobileNav);
      this.mobileNav.ariaBusy = 'false';
      this.element.dispatchEvent(this.customEvents['open']({
        label: label,
        initialMenu: this.menuData
      }));
    });
  }

  closeMenu(action) {
    this.activeMenu = false;
    this.focusTrap.toggleTrap(false, this.mobileNav);
    this.mobileNav.classList.remove('active');
    this.mobileOverlay.classList.remove('active');
    const lastMenu = this.menuData;
    this.menuData = null;
    this.element.dispatchEvent(this.customEvents['close']({
      action: action,
      lastMenu: lastMenu || null
    }));
  }

  handleLinkClick(event, action, index) {
    return __awaiter(this, void 0, void 0, function* () {
      const menuCheck = this.element.querySelector('.nci-header-mobilenav__list');
      if (menuCheck) menuCheck.remove();
      this.mobileNav.ariaBusy = 'true';
      this.loader.classList.remove('hidden');
      const link = event.target;
      const dataMenuID = link.getAttribute('data-menu-id');
      const target = event.currentTarget;
      const label = (target.textContent || '').trim();

      if (dataMenuID) {
        this.menuData = yield this.adaptor.getNavigationLevel(dataMenuID);
        const menu = this.displayNavLevel(this.menuData);
        this.mobileNav.append(menu);
        this.focusTrap.toggleTrap(true, this.mobileNav);
      }

      this.element.dispatchEvent(this.customEvents['linkclick']({
        action: action || null,
        data: this.menuData,
        label: label || null,
        index: index || null
      }));
    });
  }

  displayNavLevel(data) {
    const items = data.items;
    this.sectionParent = data.parent;
    const menu = this.createDom('ul', ['nci-header-mobilenav__list']);
    const childItems = items.map((item, index) => {
      index = this.sectionParent ? index + 1 : index;
      return item.hasChildren ? this.makeMenuNode(item, index) : this.makeMenuLink(item, index);
    });

    if (this.sectionParent) {
      const menuList = this.createDom('ul', ['nci-header-mobilenav__list']);
      const menuBack = this.makeBackNode(this.sectionParent);
      menu.append(menuBack);
      const menuHolder = this.createDom('li', ['nci-header-mobilenav__list-holder']);
      menuHolder.append(menuList);
      const exploreSection = this.makeMenuLink(data, 0);
      menuList.append(exploreSection);
      menu.append(menuHolder);
      menuList.append(...childItems);
    } else {
      menu.append(...childItems);
    }

    this.mobileNav.ariaBusy = 'false';
    this.loader.classList.add('hidden');
    return menu;
  }

  makeBackNode(item) {
    const dataMenuID = this.adaptor.useUrlForNavigationId ? item.path : item.id;
    const listItem = this.createDom('li', ['nci-header-mobilenav__list-node', 'active'], []);
    const linkLabel = this.createDom('button', ['nci-header-mobilenav__list-msg'], [{
      'data-menu-id': dataMenuID
    }, {
      'data-href': item.path
    }, {
      'data-options': 0
    }, {
      'data-isroot': 'false'
    }]);
    linkLabel.innerHTML = item.label;
    linkLabel.addEventListener('click', this.linkClickListener = event => this.handleLinkClick(event, 'Back'), true);
    listItem.append(linkLabel);
    return listItem;
  }

  makeMenuNode(item, index) {
    const dataMenuID = this.adaptor.useUrlForNavigationId ? item.path : item.id;
    const listItem = this.createDom('li', ['nci-header-mobilenav__list-node'], []);
    const linkLabel = this.createDom('button', ['nci-header-mobilenav__list-label'], [{
      'data-href': item.path
    }, {
      'data-menu-id': dataMenuID
    }, {
      'data-options': 0
    }, {
      'data-isroot': 'false'
    }]);
    linkLabel.innerHTML = item.label;
    listItem.addEventListener('click', this.linkClickListener = event => this.handleLinkClick(event, 'Child', index), true);
    listItem.append(linkLabel);
    return listItem;
  }

  makeMenuLink(item, index) {
    const listItem = this.createDom('li', ['nci-header-mobilenav__list-item'], []);
    const linkItem = this.createDom('a', ['nci-header-mobilenav__list-link'], [{
      href: item.path
    }, {
      'data-options': 0
    }]);
    if (this.pageUrl === item.path) linkItem.classList.add('current');
    linkItem.innerHTML = item.label;
    listItem.addEventListener('click', this.linkClickListener = event => this.handleLinkClick(event, 'Child', index), true);
    listItem.append(linkItem);
    return listItem;
  }

  createDom(dom, classes, options) {
    const element = document.createElement(dom);

    if (classes) {
      [...classes].forEach(name => {
        element.classList.add(name);
      });
    }

    if (options) {
      [...options].forEach(opt => {
        const key = Object.keys(opt)[0];
        const value = Object.values(opt)[0];
        element.setAttribute(key, value);
      });
    }

    return element;
  }

  createCustomEvents() {
    const events = ['close', 'open', 'linkclick'];
    [...events].forEach(event => {
      this.customEvents[event] = detail => new CustomEvent(`nci-header:mobile-menu:${event}`, {
        bubbles: true,
        detail
      });
    });
  }

}

class Search {
  constructor(searchForm, searchInputFocusHandler, searchInputBlurHandler) {
    this.searchForm = searchForm;
    this.searchInputBlurHandler = searchInputBlurHandler;
    this.searchInputFocusHandler = searchInputFocusHandler;
    this.searchField = this.searchForm.querySelector('#nci-header-search__field');

    if (this.searchField) {
      this.initialize();
    }
  }

  initialize() {
    this.searchField.addEventListener('focus', this.searchInputFocusHandler, false);
    this.searchField.addEventListener('focusout', this.searchInputBlurHandler, false);
  }

  static isSearchFormValid() {
    const searchForm = document.querySelector('form.nci-header-search');
    const searchInput = document.querySelector('#nci-header-search__field');
    const searchButton = document.querySelector('button.nci-header-search__search-button');

    if (searchForm && searchInput && searchButton) {
      return true;
    } else {
      return false;
    }
  }

  unregister() {
    this.searchField.removeEventListener('focus', this.searchInputFocusHandler, false);
    this.searchField.removeEventListener('focusout', this.searchInputBlurHandler, false);
  }

}

class NCIExtendedHeaderWithMegaMenu {
  constructor(element, options) {
    this.searchInputFocusHandler = event => this.handleSearchFocus(event);

    this.searchInputBlurHandler = event => this.handleSearchBlur(event);

    this.element = element;
    this.options = options;
    this.megaMenuNav = this.wireUpMegaMenu();
    this.mobileMenu = this.wireUpMobileMenu();
    const searchFormEl = this.element.querySelector('form.nci-header-search');

    if (searchFormEl) {
      this.searchForm = new Search(searchFormEl, this.searchInputFocusHandler, this.searchInputBlurHandler);
    }

    const valid = Search.isSearchFormValid();

    if (valid) {
      this.searchDiv = this.element.querySelector('.nci-header-nav__secondary');
    }

    const existingComponent = NCIExtendedHeaderWithMegaMenu._components.get(this.element);

    if (existingComponent) {
      existingComponent.unregister();
    }

    NCIExtendedHeaderWithMegaMenu._components.set(this.element, this);
  }

  static create(element, options) {
    if (!(element instanceof HTMLElement)) {
      throw 'Element is not an HTMLElement';
    }

    return this._components.get(element) || new this(element, options);
  }

  static autoInit() {
    document.addEventListener('DOMContentLoaded', () => {
      const headers = Array.from(document.getElementsByClassName('nci-header'));
      headers.forEach(header => {
        this.create(header, {
          megaMenuSource: new DefaultMegaMenuSource(),
          mobileMenuSource: new DefaultMobileMenuSource()
        });
      });
    });
  }

  unregister() {
    if (this.searchForm) {
      this.searchForm.unregister();
    }

    this.megaMenuNav.unregister();
    this.mobileMenu.unregister();

    NCIExtendedHeaderWithMegaMenu._components.delete(this.element);
  }

  wireUpMegaMenu() {
    const navigation = this.element.querySelector('.nci-header-nav__primary');
    return new MegaMenuNav(navigation, this.options.megaMenuSource);
  }

  wireUpMobileMenu() {
    const navigation = this.element;
    return new MobileMenu(navigation, this.options.mobileMenuSource);
  }

  handleSearchFocus(event) {
    event.preventDefault();
    this.searchDiv.classList.add('search-focused');
  }

  handleSearchBlur(event) {
    event.preventDefault();
    setTimeout(() => {
      this.searchDiv.classList.remove('search-focused');
    }, 250);
  }

}
NCIExtendedHeaderWithMegaMenu._components = new Map();

export { NCIAutocomplete, NCIBigFooter, NCIExtendedHeaderWithMegaMenu, NCISiteAlert, NCISubscribe };
